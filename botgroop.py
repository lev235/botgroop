from telegram import Update, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)
from telegram.error import TelegramError
import re, logging

# üîê –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = '8178775990:AAGGwrAEHAnWRvfbUrnpRbhWHfJjHDPOf1w'

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
user_data_store = {}

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ @—é–∑–µ—Ä–Ω–µ–π–º–æ–≤
LINK_RE = re.compile(
    r'(https?://t\.me/[^\s]+|@[\w\d_]+)',
    re.IGNORECASE
)

# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø/—Å—Å—ã–ª–∫–∏
def extract_targets(text: str) -> list[str]:
    links = LINK_RE.findall(text)
    normalized = []
    for raw in links:
        if raw.startswith('@'):
            normalized.append(raw)  # –æ—Å—Ç–∞–≤–ª—è–µ–º @
        else:
            tail = raw.rsplit('/', 1)[-1]
            if tail.startswith('+'):
                normalized.append(raw)  # –∏–Ω–≤–∞–π—Ç
            else:
                normalized.append('@' + tail)
    return normalized

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤.\n"
        "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç, –∞ –∑–∞—Ç–µ–º:\n"
        "/addgroups <—Å—Å—ã–ª–∫–∏ –∏–ª–∏ @usernames>\n"
        "–ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /send"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ —Å—Å—ã–ª–∫–∞–º
async def add_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    targets = extract_targets(update.message.text)

    if not targets:
        await update.message.reply_text("‚ö†Ô∏è –Ø –Ω–µ –Ω–∞—à—ë–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º–∞.")
        return

    store = user_data_store.setdefault(user_id, {'photos': [], 'text': '', 'groups': []})
    added, failed = [], []

    for tgt in targets:
        try:
            if tgt.startswith("https://t.me/+"):
                # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞-–∏–Ω–≤–∞–π—Ç
                chat = await context.bot.join_chat(tgt)
            else:
                chat = await context.bot.get_chat(tgt)
            member = await context.bot.get_chat_member(chat.id, context.bot.id)
            if member.status in ("left", "kicked"):
                raise ValueError("–ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ")
        except TelegramError as e:
            failed.append(f"{tgt} ({e.message})")
            continue
        except Exception as e:
            failed.append(f"{tgt} ({e})")
            continue

        store['groups'].append(chat.id)
        name = chat.title or chat.username or str(chat.id)
        added.append(name)

    msg = []
    if added:
        msg.append(f"‚úÖ –î–æ–±–∞–≤–∏–ª: {', '.join(added)}")
    if failed:
        msg.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {', '.join(failed)}\n"
                   "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞.")

    await update.message.reply_text('\n'.join(msg))

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    store = user_data_store.setdefault(user_id, {'photos': [], 'text': '', 'groups': []})
    photo_id = update.message.photo[-1].file_id
    store['photos'].append(photo_id)
    await update.message.reply_text("üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

# –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.startswith('/'):
        return
    user_id = update.effective_user.id
    store = user_data_store.setdefault(user_id, {'photos': [], 'text': '', 'groups': []})
    store['text'] = update.message.text
    await update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /send ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞
async def send_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data_store.get(user_id)

    if not data or (not data['photos'] and not data['text']):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return
    if not data.get('groups'):
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ /addgroups.")
        return

    errors = []
    for gid in data['groups']:
        try:
            if len(data['photos']) > 1:
                media = [InputMediaPhoto(p) for p in data['photos']]
                media[0].caption = data['text']
                await context.bot.send_media_group(gid, media)
            else:
                await context.bot.send_photo(gid, photo=data['photos'][0], caption=data['text'])
        except TelegramError as e:
            errors.append(f"{gid}: {e.message}")
        except Exception as e:
            errors.append(f"{gid}: {e}")

    if errors:
        await update.message.reply_text("–ß–∞—Å—Ç—å –≥—Ä—É–ø–ø –Ω–µ –ø—Ä–∏–Ω—è–ª–∞ –ø–æ—Å—Ç:\n" + "\n".join(errors))
    else:
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º!")

    user_data_store.pop(user_id, None)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addgroups", add_groups))
    app.add_handler(CommandHandler("send", send_post))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()