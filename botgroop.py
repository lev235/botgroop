
# botgroop.py
import os
import re
import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters,
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)

BOT_TOKEN   = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")          # https://<render-url>
PORT        = int(os.getenv("PORT", 10000))     # Render –¥–∞—ë—Ç 10000

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
user_groups: dict[int, list[str]] = {}          # —Å—Å—ã–ª–∫–∏-–≥—Ä—É–ø–ø—ã
user_posts : dict[int, dict | None] = {}        # {'photo_file_id', 'caption'}
user_states: dict[int, str | None] = {}         # None / edit_groups / edit_post
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


# ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LINK_RE = re.compile(r"(?:https?://)?t\.me/([\w\d_]+)|@([\w\d_]+)", re.I)

def parse_links(text: str) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ https://t.me/<username> –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    links = []
    for m in LINK_RE.finditer(text):
        name = m.group(1) or m.group(2)
        links.append(f"https://t.me/{name}")
    return links
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    uid = update.effective_user.id

    user_groups.setdefault(uid, [])
    user_posts.setdefault(uid, None)
    user_states[uid] = "edit_groups"            # ‚Üê —Å—Ä–∞–∑—É –∂–¥—ë–º —Å—Å—ã–ª–∫–∏!

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª / —Å—Ç—Ä–æ–∫—É).\n"
        "2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äì —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç.\n"
        "3Ô∏è‚É£ /send ‚Äì —Ä–∞–∑–æ—Å–ª–∞—Ç—å.\n\n"
        "üõ† –ö–Ω–æ–ø–∫–∏ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–≤–æ–¥–∞."
    )


async def groups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    uid = update.effective_user.id

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏:
    #  ‚îÄ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
    #  ‚îÄ –∏–ª–∏ –≥—Ä—É–ø–ø –µ—â—ë –Ω–µ—Ç (–ø–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø–æ—Å–ª–µ /start)
    if user_states.get(uid) not in ("edit_groups", None) and user_groups.get(uid):
        return

    links = parse_links(update.message.text)
    if not links:
        return                                       # —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∏ ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    user_groups[uid] = links
    user_states[uid] = None                          # –≤—ã—à–ª–∏ –∏–∑ edit_groups

    kb = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—ã", callback_data="edit_groups")
    )
    await update.message.reply_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥—Ä—É–ø–ø: {len(links)}",
        reply_markup=kb,
    )


async def photo_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    uid = update.effective_user.id

    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ edit_post –∏–ª–∏ –ø–æ—Å—Ç–∞ –µ—â—ë –Ω–µ—Ç
    if user_states.get(uid) not in ("edit_post", None) and user_posts.get(uid):
        return

    if not update.message.photo:
        return

    photo = update.message.photo[-1]
    caption = update.message.caption or ""
    user_posts[uid] = {"photo_file_id": photo.file_id, "caption": caption}
    user_states[uid] = None

    kb = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç", callback_data="edit_post")
    )
    await update.message.reply_text("üì∏ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=kb)


async def send_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    uid = update.effective_user.id
    groups = user_groups.get(uid) or []
    post   = user_posts.get(uid)

    if not groups:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã.")
        return
    if not post:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    await update.message.reply_text(
        "‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç –≤:\n" + "\n".join(groups)
    )

    sent, errors = 0, []
    for link in groups:
        try:
            await context.bot.send_photo(
                chat_id=link,                       # PTB –ø—Ä–∏–º–µ—Ç —Å—Å—ã–ª–∫—É
                photo=post["photo_file_id"],
                caption=post["caption"]
            )
            sent += 1
        except Exception as e:
            errors.append(f"{link}: {e}")

    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
    if errors:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(errors))


async def show_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    uid = update.effective_user.id
    groups = user_groups.get(uid) or []

    kb = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—ã", callback_data="edit_groups")
    )
    text = "–ì—Ä—É–ø–ø—ã –Ω–µ –∑–∞–¥–∞–Ω—ã." if not groups else "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n" + "\n".join(groups)
    await update.message.reply_text(text, reply_markup=kb)


async def show_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    uid = update.effective_user.id
    post = user_posts.get(uid)
    if not post:
        await update.message.reply_text("–ü–æ—Å—Ç –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return

    kb = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç", callback_data="edit_post")
    )
    await update.message.reply_photo(
        photo=post["photo_file_id"], caption=post["caption"], reply_markup=kb
    )


async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "edit_groups":
        user_states[uid] = "edit_groups"
        await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª / —Å—Ç—Ä–æ–∫—É).")
    elif q.data == "edit_post":
        user_states[uid] = "edit_post"
        await q.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")


# ‚îÄ‚îÄ‚îÄ main / webhook ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start",  start))
    app.add_handler(CommandHandler("send",   send_handler))
    app.add_handler(CommandHandler("groups", show_groups))
    app.add_handler(CommandHandler("post",   show_post))

    app.add_handler(MessageHandler(filters.TEXT  & ~filters.COMMAND,  groups_handler))
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND,  photo_post_handler))
    app.add_handler(CallbackQueryHandler(buttons))

    # WebHook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
    )

if __name__ == "__main__":
    main()